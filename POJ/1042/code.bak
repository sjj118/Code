var
	i,h,n,j,tail,ans,max:longint;
	t,f,d,bf,bd,sol,maxsol,p:array[0..26]of longint;
	b:boolean;
	
	procedure swap(a,b:longint);
	var
		temp:longint;
	begin
		temp:=f[a];
		f[a]:=f[b];
		f[b]:=temp;
		temp:=d[a];
		d[a]:=d[b];
		d[b]:=temp;
		temp:=p[a];
		p[a]:=p[b];
		p[b]:=temp;
	end;
	
	procedure down(k:longint);
	begin
		while k*2<=tail do begin
			if (tail=k*2)or((f[k*2]>f[k*2+1])or((f[k*2]=f[k*2+1])and(p[k*2]<p[k*2+1]))) then begin
				if (f[k*2]>f[k])or((f[k*2]=f[k])and(p[k*2]<p[k])) then swap(k,k*2) else exit;
				k:=k*2;
			end else begin
				if (f[k*2+1]>f[k])or((f[k*2+1]=f[k])and(p[k*2+1]<p[k])) then swap(k,k*2+1) else exit;
				k:=k*2+1;
			end;
		end;
	end;
	
	procedure up(k:longint);
	begin
		while (k>1)and((f[k]>f[k div 2])or((f[k]=f[k div 2])and(p[k]>p[k div 2]))) do begin
			swap(k,k div 2);
			k:=k div 2;
		end;
	end;
	
	procedure buildheap(k:longint);
	var
		i:longint;
	begin
		tail:=k;
		for i:=n downto 1 do down(i);
	end;
	
	procedure delete;
	begin
		swap(1,tail);
		dec(tail);
		down(1);
	end;
	
	procedure put(kf,kd,kp:longint);
	begin
		inc(tail);
		f[tail]:=kf;
		d[tail]:=kd;
		p[tail]:=kp;
		up(tail);
	end;
	
begin
	readln(n);
	while n<>0 do begin
		readln(h);
		h:=h*12;
		max:=0;
		for i:=1 to n do read(bf[i]);
		for i:=1 to n do read(bd[i]);
		for i:=1 to n-1 do read(t[i]);
		fillchar(maxsol,sizeof(maxsol),0);
		for i:=1 to n do begin
			f:=bf;
			d:=bd;
			ans:=0;
			h:=h-t[i-1];
			for j:=1 to i do p[j]:=j;
			buildheap(i);
			fillchar(sol,sizeof(sol),0);
			for j:=1 to h do begin
				ans:=ans+f[1];
				inc(sol[p[1]]);
				if f[1]<d[1] then put(0,0,p[1]) else put(f[1]-d[1],d[1],p[1]);
				delete;
			end;
			if ans>max then begin
				max:=ans;
				maxsol:=sol;
			end else if ans=max then begin
				b:=false;
				for j:=1 to n do begin
					if sol[j]>maxsol[j] then begin
						b:=true;
						break;
					end;
					if sol[j]<maxsol[j] then begin
						b:=false;
						break;
					end;
				end;
				if b then begin
					max:=ans;
					maxsol:=sol;
				end;
			end;
		end;
		for i:=1 to n-1 do write(maxsol[i]*5,', ');
		writeln(maxsol[n]*5);
		writeln('Number of fish expected: ',max);
		writeln;
		readln(n);
	end;
end.
